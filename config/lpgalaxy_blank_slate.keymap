#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define TBLE_ORTHO 1
#define ___ &none
// #define XXX &none
// #define ___ &trans

#define LY_BASE 0
#define LY_NAV 1
#define LY_LNUM 2
#define LY_RNUM 3

&lt {
    flavor = "balanced";
    quick_tap_ms = <170>;
    tapping-term-ms = <170>;
};

&mt {
    tapping-term-ms = <300>;
};

#define BT(n) BT_SEL n


/ {

    chosen {
        zmk,matrix_transform = &ortho_transform;
    };

    macros {
        ZMK_MACRO(thumbs_up,
            wait-ms = <1>;
            tap-ms = <5>;
            bindings = <&kp PLUS &kp COLON &kp PLUS &kp N1 &kp COLON &kp RET>;
        )
    };

    tap_dances {
        shifty: shift_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHIFTY";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp LSHFT>, <&caps_word>;
        };
    };

    combos {
        // #include "combos.dtsi"
        compatible = "zmk,combos";
        combo_tab {
            timeout-ms = <80>;
            key-positions = <1 2>;
            bindings = <&kp TAB>;
        };
        combo_esc {
            timeout-ms = <80>;
            key-positions = <14 15>;
            bindings = <&gresc>;
        };
        combo_backspace {
            timeout-ms = <80>;
            key-positions = <20 21>;
            bindings = <&kp BKSP>;
        };
        combo_backspace2 {
            timeout-ms = <80>;
            key-positions = <19 20>;
            bindings = <&kp BKSP>;
        };
        combo_ret {
            timeout-ms = <80>;
            key-positions = <32 33>;
            bindings = <&kp RET>;
        };
        combo_slash {
            timeout-ms = <100>;
            key-positions = <33 34>;
            bindings = <&kp SLASH>;
        };
    };

    behaviors {
        gresc: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;
            mods = <(MOD_LGUI|MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LGUI|MOD_RSFT)>;
        };

        hm1: homerow1 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <160>;
            quick-tap-ms = <160>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };

        hm2: homerow2 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <130>;
            quick-tap-ms = <130>;
            bindings = <&kp>, <&kp>;
        };

        hm3: homerow3 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <140>;
            quick-tap-ms = <140>;
            bindings = <&mo>, <&kp>;
        };


        hm4: homerow4 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <170>;
            quick-tap-ms = <170>;
            require-prior-idle-ms = <110>;
            bindings = <&mo>, <&kp>;
        };

    };


    //- Q > 오른족 숫자넣기
    //- [esc 탭] [지우기 엔터 한영]



    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
                ___  &hm4 LY_RNUM Q  &kp W  &kp E     &kp R     &kp T                &kp Y       &kp U          &kp I      &kp O    &kp P              ___
                ___  &hm1 LCTL A     &kp S  &kp D     &kp F     &kp G                &kp H       &kp J          &kp K      &kp L    &hm3 LY_LNUM RET   ___
                ___  &hm1 LSFT Z     &kp X  &kp C     &kp V     &kp B                &kp N       &kp M          &kp COMMA  &kp DOT  &hm2 RSFT BKSP     ___
                ___  ___             ___    &kp LALT  &kp LGUI  &kp SPACE            &mo LY_NAV  &lt RCTRL F18  &kp RCTRL  ___      ___                ___

            >;
        };

        nav_layer {
            label = "LY_NAV";
            bindings = <
                //- 모프로 탭이동
                ___    &kp LBRC         &kp RBRC   &kp LPAR      &kp RPAR      &kp DLLR           ___       &kp GRAVE  &kp UP            &kp PG_UP         &kp COLON  &kp BKSP
                ___    &hm1 LCTL LBKT   &kp RBKT   &kp KP_MINUS  &kp KP_EQUAL  &kp SQT            &kp DQT   &kp LEFT   &kp DOWN          &kp RIGHT         &kp SEMI   &kp RET
                ___    &hm1 LSFT UNDER  &kp QMARK  &kp LT        &kp GT        &kp BSLH           &kp AMPS  &kp PG_DN  &kp LG(LS(LBKT))  &kp LG(LS(RBKT))  ___       &kp RSHFT
                ___    ___              ___        &kp LALT      &kp LGUI      &kp SPACE          ___       ___        ___                ___              ___      ___
            >;
        };

        lnumber_layer {
            label = "LY_LNUM";
            bindings = <
                ___  ___      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  ___        &kp PLUS  &kp MINUS  &kp EQUAL  ___
                ___  &kp LCTL &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  ___           ___           &kp SLASH  &kp DOT   &kp COMMA  &kp STAR   ___
                ___  &kp LSFT &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  ___           ___           ___        ___        ___       ___        ___
                ___  ___      ___           &kp LALT      &kp LGUI      &kp NUMBER_0  &kp LSHFT     ___        ___        ___       ___        ___
            >;
        };

        rnumber_layer {
            label = "LY_RNUM";
            bindings = <
                &none  $none             &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)       &kp LG(NUMBER_4)   &kp PRCNT     &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp PLUS   &kp BKSP
                &none  &kp RC(NUMBER_6)  &kp LG(LS(LBKT))  &kp LG(LS(RBKT))  &kp LG(LS(NUMBER_3))   &kp EQUAL          &kp STAR      &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS  &kp RET
                &none  &none             &none             &none             &none                  &kp BSLH           &kp SLASH     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp DOT    &kp EQUAL
                &none  &none             &none             &none             &kp LC(LS(LA(LG(C))))  &kp SPACE          &kp NUMBER_0  &none         &none         &none         &none      &none
            >;
        };

    };

};
