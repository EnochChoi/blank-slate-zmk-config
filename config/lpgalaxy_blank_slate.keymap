#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define TBLE_ORTHO 1
#define BT(n) BT_SEL n
#define ___ &none
// #define XXX &none
// #define ___ &trans

#define LY_NAV 1
#define LY_LNUM 2
#define LY_RNUM 3
#define LY_FUNC 4
#define LY_SPECIAL 5
#define LY_SUPPORT 6

// &kscan {
//     debounce-press-ms = <10>;
//     debounce-release-ms = <10>;
// };

&lt { tapping-term-ms = <200>; };
&mt { tapping-term-ms = <300>; };

/ {

    chosen { zmk,matrix_transform = &ortho_transform; };

    behaviors {
        gresc: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;
            mods = <(MOD_LGUI|MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LGUI|MOD_RSFT)>;
        };

        kp_gresc: kp_to_gresc {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            bindings = <&kp>, <&gresc>;
            tapping-term-ms = <170>;
        };

        kpkp: kp_to_kp {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            tapping-term-ms = <180>;
        };

        mokp: mo_to_kp {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;
            tapping-term-ms = <160>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
                &mokp LY_RNUM TAB   &kp Q  &kp W  &kp E     &kp R     &kp T      &kp Y       &kp U                &kp I      &kp O     &kp P        &kp BKSP
                &kp_gresc LCTRL 0   &kp A  &kp S  &kp D     &kp F     &kp G      &kp H       &kp J                &kp K      &kp L     &mo LY_LNUM  &mokp LY_SPECIAL RET
                &kp LSHFT           &kp Z  &kp X  &kp C     &kp V     &kp B      &kp N       &kp M                &kp COMMA  &kp DOT   &kp SLASH    &kp RSHFT
                &mo LY_SUPPORT      ___    ___    &kp LALT  &kp LGUI  &kp SPACE  &mo LY_NAV  &kpkp RCTRL F18      &kp RCTRL  ___       &kp LEFT     &kp RIGHT
            >;
        };

        nav_layer {
            label = "LY_NAV";
            bindings = <
                &kp F18    &kp LBRC   &kp RBRC   &kp LPAR      &kp RPAR      &kp DLLR   &kp PLUS  &kp GRAVE  &kp UP            &kp PG_UP         &kp COLON  &kp BKSP
                &kp LCTRL  &kp LBKT   &kp RBKT   &kp KP_MINUS  &kp KP_EQUAL  &kp SQT    &kp DQT   &kp LEFT   &kp DOWN          &kp RIGHT         &kp SEMI   &kp RET
                &kp LSHFT  &kp UNDER  &kp QMARK  &kp LT        &kp GT        &kp BSLH   &kp AMPS  &kp PG_DN  &kp LG(LS(LBKT))  &kp LG(LS(RBKT))  &kp PIPE   &kp RSHFT
                ___        ___        ___        &kp LALT      &kp LGUI      &kp SPACE  ___       ___        ___               ___               ___        ___
            >;
        };

        left_num_layer {
            label = "LY_LNUM";
            bindings = <
                &kp GRAVE  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  ___        &kp PLUS     &kp MINUS  &kp EQUAL  ___  ___
                &kp PRCNT  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  ___           ___           &kp SLASH  &kp DOT      &kp COMMA  &kp STAR   ___  ___
                &kp LSHFT  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  ___           ___           ___        &mo LY_FUNC  ___        ___        ___  ___
                ___        ___           ___           &kp LALT      &kp LGUI      &kp NUMBER_0  &kp LSHFT  ___          ___        ___        ___  ___
            >;
        };

        right_num_layer {
            label = "LY_RNUM";
            bindings = <
                ___  &kp LG(NUMBER_1)      &kp LG(NUMBER_2)  &kp LG(NUMBER_3)        &kp LG(NUMBER_4)       ___        &kp PRCNT     &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp PLUS   &kp BKSP
                ___  &kp LG(LS(NUMBER_3))  &kp LG(LS(LBKT))  &kp LG(LS(RBKT))        &kp LA(SPACE)          ___        &kp STAR      &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS  &kp RET
                ___  ___                   ___               ___                     ___                    ___        &kp SLASH     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp DOT    &kp EQUAL
                ___  ___                   ___               &kp LC(LS(LA(LG(C))))  &kp LG(SPACE)           &kp SPACE  &kp NUMBER_0  ___           ___           ___           ___        ___
            >;
        };

        func_layer {
            label = "LY_FUNC";
            bindings = <
                ___        &kp F1  &kp F2  &kp F3    &kp F10   ___        ___  ___  ___  ___  ___  ___
                &kp LCTRL  &kp F4  &kp F5  &kp F6    &kp F11   ___        ___  ___  ___  ___  ___  ___
                &kp LSHFT  &kp F7  &kp F8  &kp F9    &kp F12   ___        ___  ___  ___  ___  ___  ___
                ___        ___     ___     &kp LALT  &kp LGUI  &kp SPACE  ___  ___  ___  ___  ___  ___
            >;
        };

        nav_special_layer {
            label = "LY_SPECIAL";
            bindings = <
                ___  &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &kp LG(NUMBER_4)        ___                   ___            ___  ___  ___  ___  ___
                ___  &kp LG(NUMBER_0)  &kp RC(NUMBER_6)  &kp LA(SPACE)     &kp LC(GRAVE)           ___                   ___            ___  ___  ___  ___  ___
                ___  &kp LG(LA(LBKT))  &kp LG(LA(RBKT))  &kp LA(SPACE)     &kp LC(LS(LA(LG(C))))   ___                   ___            ___  ___  ___  ___  ___
                ___  ___               ___               ___               ___                     &kp LG(SPACE)         &kp LG(SPACE)  ___  ___  ___  ___  ___
            >;
        };

        support_layer {
            label = "LY_SUPPORT";
            bindings = <
                &kp RC(NUMBER_6)  ___  ___  ___  &kp LG(TAB)    ___           ___  ___            ___  ___  ___  ___
                ___               ___  ___  ___  &kp LG(SPACE)  ___           ___  &kp LC(GRAVE)  ___  ___  ___  ___
                ___               ___  ___  ___  ___            ___           ___  ___            ___  ___  ___  ___
                ___               ___  ___  ___  ___            ___           ___  ___            ___  ___  ___  ___
            >;
        };

    };

};
