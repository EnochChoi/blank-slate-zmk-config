#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define TBLE_ORTHO 1
#define ___ &none
// #define XXX &none
// #define ___ &trans

#define LY_SPECIAL 1
#define LY_NAV 2
#define LY_NUM 3

&lt {
    quick_tap_ms = <200>;
    tapping-term-ms = <200>;
};

&mt {
    tapping-term-ms = <300>;
};

#define BT(n) BT_SEL n

/ {

    chosen {
        zmk,matrix_transform = &ortho_transform;
    };

    macros {
        ZMK_MACRO(thumbs_up,
            wait-ms = <1>;
            tap-ms = <5>;
            bindings = <&kp PLUS &kp COLON &kp PLUS &kp N1 &kp COLON &kp RET>;
        )
    };

    tap_dances {
        shifty: shift_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHIFTY";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp LSHFT>, <&caps_word>;
        };
    };


    combos {
        // #include "combos.dtsi"
        compatible = "zmk,combos";
        combo_tab {
            timeout-ms = <80>;
            key-positions = <1 2>;
            bindings = <&kp TAB>;
        };
        combo_esc {
            timeout-ms = <80>;
            key-positions = <15 16>;
            bindings = <&gresc>;
        };
        combo_ret {
            timeout-ms = <80>;
            key-positions = <20 21>;
            bindings = <&kp RET>;
        };
    };

    behaviors {
        gresc: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_ESCAPE";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;
            mods = <(MOD_LGUI|MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LGUI|MOD_RSFT)>;
        };

        kpkp: kp_to_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "KP_TO_KP";
            #binding-cells = <2>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            tapping-term-ms = <170>;
        };

        hm1: homerow_mods1 {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS1";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <210>;
            quick-tap-ms = <170>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
        };

        //! 확정 (잘됨)
        hm2: homerow_mods2 {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS2";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <170>;
            quick-tap-ms = <170>;
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
        };

        hm3: homerow_mods2 {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS2";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;
        };

        mm_bs: morph_bs {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&hm3 RSFT BKSP>, <&kp BKSP>;
            mods = <(MOD_LGUI|MOD_LALT)>;
            keep-mods = <(MOD_LGUI|MOD_LALT)>;
        };
    };


    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
                ___  &kp Q        &kp W        &kp E        &kp R        &kp T                &kp Y       &kp U             &kp I        &kp O        &kp P      ___
                ___  &hm1 LSFT A  &hm1 LCTL S  &hm1 LALT D  &hm1 LGUI F  &kp G                &kp H       &hm2 RGUI J       &hm2 RALT K  &hm2 LCTL L  &mm_bs     ___
                ___  &kp Z        &kp X        &kp C        &kp V        &kp B                &kp N       &kp M             &kp COMMA    &kp DOT      &kp SLASH  ___
                ___  ___          ___          ___          &kp LGUI     &kp SPACE            &mo LY_NAV  &kpkp RCTRL F18   &kp RCTRL    ___          ___        ___
            >;
        };

        special_layer {
            label = "LY_SPECIAL";
            bindings = <
                ___  &kp LG(NUMBER_1)  &kp LG(NUMBER_2)    &kp LG(NUMBER_3)  &kp LG(NUMBER_4)  &kp LG(LS(NUMBER_3))           ___                ___    ___  ___  ___  ___
                ___  &kp LSFT          &kp LCTL            &kp LALT          &kp LGUI          &kp LG(SPACE)                  &kp BSLH           ___    ___  ___  ___  ___
                ___  &kp LG(GRAVE)     &kp LG(TAB)         &kp LG(LS(LBKT))  &kp LG(LS(RBKT))  ___                            &kp LC(NUMBER_6)   ___    ___  ___  ___  ___
                ___  ___               ___                 ___               ___               ___                            ___                ___    ___  ___  ___  ___
            >;
        };

        nav_layer {
            label = "LY_NAV";
            bindings = <
                ___    &kp LBRC        &kp RBRC        &kp LPAR            &kp RPAR            &kp DLLR           ___       &kp GRAVE  &kp UP            &kp PG_UP         &kp COLON  &kp BKSP
                ___    &hm2 LSFT LBKT  &hm2 LCTL RBKT  &hm2 LALT KP_MINUS  &hm2 LGUI KP_EQUAL  &kp SQT            &kp DQT   &kp LEFT   &kp DOWN          &kp RIGHT         &kp SEMI   &kp RET
                ___    &kp UNDER       &kp QMARK       &kp LT              &kp GT              &kp BSLH           &kp AMPS  &kp PG_DN  &kp LG(LS(LBKT))  &kp LG(LS(RBKT))  ___       &kp RSHFT
                ___    ___             ___             ___                 ___                 &kp SPACE          ___       ___        ___                ___              ___      ___
            >;
        };

        num_layer {
            label = "LY_NUM";
            bindings = <
                ___  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5             &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  ___
                ___  &kp LSFT      &kp LCTL      &kp LALT      &kp LGUI      &kp F11                  &kp F12       &kp LGUI      &kp LALT      &kp LCTL      &kp LSFT      ___
                ___  &kp F1        &kp F2        &kp F3        &kp F4        &kp F5                   &kp F6        &kp F7        &kp F8        &kp F9        &kp F10       ___
                ___  ___           ___           ___           ___           ___                      ___           ___           ___           ___           ___           ___
            >;
        };
    };

};
